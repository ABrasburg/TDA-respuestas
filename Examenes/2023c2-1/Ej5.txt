Trabajamos para el mafioso Arnook, que es quien tiene la máxima influencia y poder en la ciudad costera de Ciudad
República. Allí reina el caos y la delincuencia, a tal punto que quien termina organizando las pequeñas mafias locales
no es otro sino Arnook. En particular, nos vamos a centrar en unos pedidos que recibe de parte de dichos grupos por el
control de diferentes kilómetros de la ruta costera. Cada pequeña mafia le pide a Arnook control sobre un rango de
kilómetros (por ejemplo, la mafia nro 1 le pide del kilómetro 1 al 5, la mafia 2 le pide del 3 al 8, etc. . . ). Si hay una
mafia tomando control de algún determinado kilómetro, no puede haber otra haciendo lo mismo (es decir, no pueden
solaparse). Cada mafia pide por un rango específico. Arnook no cobra por kilómetraje sino por “otorgar el permiso”,
indistintamente de los kilómetros pedidos. Ahora bien, esto es una mafia, no una ONG, y no debe rendir cuentas con
nadie, así lo único que le interesa es maximizar la cantidad de permisos otorgados (asegurándose de no otorgarle algún
lugar a dos mafias diferentes). Implementar un algoritmo Greedy que reciba los rangos de kilómetros pedidos por cada
mafia, y determine a cuáles se les otorgará control, de forma que no hayan dos mafias ocupando mismo territorio, y a su
vez maximizando la cantidad de pedidos otorgados. Indicar y justificar la complejidad del algoritmo implementado.
Justificar por qué el algoritmo planteado es Greedy. ¿El algoritmo da la solución óptima siempre?

def otorgar_permisos(kilometros):
    # Los ordeno por los mas cortos primero
    kilometros.sort(key=lambda x: x[1] - x[0])
    # Creo un set para ir guardando los kilometros que ya estan ocupados
    ocupados = set()
    # Creo una lista para ir guardando los permisos que voy a otorgar
    permisos = []
    # Recorro los kilometros
    for km in kilometros:
        # Si no estan ocupados
        if not any(km[0] <= x <= km[1] for x in ocupados):
            # Los agrego a los ocupados
            ocupados.update(range(km[0], km[1] + 1))
            # Agrego el permiso
            permisos.append(km)
    return permisos

El algoritmo no da siempre la solucion optima

El algoritmo que da la solucion optima es el que pone los que terminen antes primero, y si terminan al mismo tiempo
pone el que empieza antes primero